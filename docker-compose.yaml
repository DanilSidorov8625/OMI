services:
  # Auto-updater
  watchtower:
    image: containrrr/watchtower
    command:
      - "--label-enable"
      - "--interval"
      - "30"
      - "--rolling-restart"
      - "--cleanup"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped

  # Reverse proxy (Traefik)
  reverse-proxy:
    image: traefik:v3.1
    command:
      - "--providers.docker"
      - "--providers.docker.exposedbydefault=false"
      - "--entryPoints.web.address=:80"
      - "--entryPoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=danilsidorov8625@gmail.com"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ~/home/danil/letsencrypt:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  # Application (served on port 8080 inside container)
  app:
    image: danilsidorov/omi:prod
    env_file:
      - .env
    restart: always
    expose:
      - "8080"
    volumes:
      - ~/home/danil/omi/instance:/usr/src/app/instance
      - ~/home/danil/omi/logs:/usr/src/app/logs
      - ~/home/danil/omi/zippedLogs:/usr/src/app/zippedLogs
    labels:
      - "traefik.enable=true"

      # HTTPS router for omnaris.xyz
      - "traefik.http.routers.omi.rule=Host(`omnaris.xyz`)"
      - "traefik.http.routers.omi.entrypoints=websecure"
      - "traefik.http.routers.omi.tls.certresolver=myresolver"
      - "traefik.http.services.omi.loadbalancer.server.port=8080"

      # HTTP->HTTPS redirect for omnaris.xyz
      - "traefik.http.routers.omi-redirect.rule=Host(`omnaris.xyz`)"
      - "traefik.http.routers.omi-redirect.entrypoints=web"
      - "traefik.http.routers.omi-redirect.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"

      # Watchtower updates enabled
      - "com.centurylinklabs.watchtower.enable=true"

    deploy:
      mode: replicated
      replicas: 3
      update_config:
        order: start-first
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure



# services:
#   traefik:
#     image: traefik:v3.1
#     command:
#       - "--providers.docker=true"
#       - "--providers.docker.exposedbydefault=false"
#       - "--entrypoints.web.address=:80"
#       - "--api.dashboard=true"
#     ports:
#       - "8080:80"     # app via Traefik -> http://localhost:8080
#       - "8081:8080"   # Traefik dashboard -> http://localhost:8081
#     volumes:
#       - /var/run/docker.sock:/var/run/docker.sock:ro

#   app:
#     image: danilsidorov/omi:prod
#     pull_policy: always
#     env_file:
#       - .env
#     restart: unless-stopped
#     expose:
#       - "8080"   # Traefik talks to this internal port
#     healthcheck:
#       test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/api/health"]
#       interval: 30s
#       timeout: 10s
#       retries: 3
#     volumes:
#       - ${HOME}/home/danil/instance:/usr/src/app/instance
#       - ${HOME}/home/danil/logs:/usr/src/app/logs
#       - ${HOME}/home/danil/zippedLogs:/usr/src/app/zippedLogs
#     labels:
#       - "traefik.enable=true"

#       # Router -> Service binding
#       - "traefik.http.routers.omi-local.rule=PathPrefix(`/`)"
#       - "traefik.http.routers.omi-local.entrypoints=web"
#       - "traefik.http.routers.omi-local.service=omi-svc"

#       # Backend service + STICKY cookie (no TLS here, so secure=false)
#       - "traefik.http.services.omi-svc.loadbalancer.server.port=8080"
#       - "traefik.http.services.omi-svc.loadbalancer.sticky.cookie=true"
#       - "traefik.http.services.omi-svc.loadbalancer.sticky.cookie.name=omi_sticky"
#       - "traefik.http.services.omi-svc.loadbalancer.sticky.cookie.httpOnly=true"
#       - "traefik.http.services.omi-svc.loadbalancer.sticky.cookie.secure=false"
#       - "traefik.http.services.omi-svc.loadbalancer.sticky.cookie.sameSite=Lax"

#       # Let Watchtower manage this container
#       - "com.centurylinklabs.watchtower.enable=true"

#     # Compose ignores deploy.*; use --scale for replicas
#     deploy:
#       mode: replicated
#       replicas: 3
#       update_config:
#         order: start-first
#         parallelism: 1
#         delay: 5s
#       restart_policy:
#         condition: on-failure

#   watchtower:
#     image: containrrr/watchtower
#     command: ["--label-enable","--interval","30","--rolling-restart","--cleanup"]
#     volumes:
#       - /var/run/docker.sock:/var/run/docker.sock
#     restart: unless-stopped